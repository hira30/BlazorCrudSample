@page "/edit"
@page "/edit/{Id:int}"
@inject BookDbContext Context

@if (Id is null)
{
    <PageTitle>書籍の登録</PageTitle>
    <h3>書籍の登録</h3>
}
else
{
    <PageTitle>書籍の編集</PageTitle>
    <h3>書籍の編集</h3>
}

@if (Book is null)
{
    <p><em>Loading ...</em></p>
}
else
{
    <EditForm Model="Book" OnSubmit="OnSubmit" FormName="EditForm">
        <div>
            <label for="title">タイトル</label>
            <InputText id="title" @bind-Value="Book.Title" class="form-control" />
        </div>
        <div>
            <label for="author">著者</label>
            <InputText id="author" @bind-Value="Book.Author" class="form-control" />
        </div>
        <div>
            <label for="publisher">出版社</label>
            <InputText id="publisher" @bind-Value="Book.Publisher" class="form-control" />
        </div>
        <div>
            <label for="publishedYear">出版年</label>
            <InputNumber id="publishedYear" @bind-Value="Book.PublishedYear" class="form-control" />
        </div>

        <br />
        <button type="submit" class="btn btn-primary">保存</button>
    </EditForm>
}

<p>@message</p>

@code {
    [Parameter]
    public int? Id { get; set; } = null;

    // フォームから送信された情報を保持するプロパティ
    [SupplyParameterFromForm]
    private Book? Book { get; set; }

    private string message = string.Empty;

    // コンポーネント初期化時とsubmitボタン押下時にBookプロパティを初期化する
    protected override async Task OnInitializedAsync()
    {
        if (Id is not null && Book is null)
        {
            // 編集画面用の初期データをDBから取得してモデルにセット
            Book = await Context.Books.FindAsync(Id);
        }
        else if (Id is null)
        {
            // 登録画面用に初期データをセット
            Book = new();
        }
    }

    // フォーム送信時に呼び出される
    private async Task OnSubmit()
    {
        if (Id is not null)
        {
            await Update();
        }
        else
        {
            await Create();
        }
    }

    // 更新処理
    private async Task Update()
    {
        // フォームの内容でBooksテーブルの書籍情報を更新する
        var book = await Context.Books.FindAsync(Id);
        book.Title = Book.Title;
        book.Author = Book.Author;
        book.Publisher = Book.Publisher;
        book.PublishedYear = Book.PublishedYear;
        var result = await Context.SaveChangesAsync();

        message = (result == 1) ? "更新しました" : "更新に失敗しました";
    }

    //　登録処理
    private async Task Create()
    {
        // フォームの内容をBooksテーブルに登録する
        Context.Books.Add(Book);
        var result = await Context.SaveChangesAsync();

        message = (result == 1) ? "登録しました" : "登録に失敗しました";
    }
}
