@page "/edit"
@page "/edit/{Id:int}"
@inject BookDbContext Context

@if (Id is null)
{
    <PageTitle>書籍の登録</PageTitle>
    <h3>書籍の登録</h3>
}
else
{
    <PageTitle>書籍の編集</PageTitle>
    <h3>書籍の編集</h3>
}

<EditForm Model="Book" OnSubmit="OnSubmit" FormName="BookForm">
     <div>
         <label for="title">タイトル</label>
         <InputText id="title" @bind-Value="Book.Title" class="form-control" />
     </div>
    <div>
        <label for="author">著者</label>
        <InputText id="author" @bind-Value="Book.Author" class="form-control" />
    </div>
     <div>
         <label for="publisher">出版社</label>
         <InputText id="publisher" @bind-Value="Book.Publisher" class="form-control" />
     </div>
     <div>
         <label for="publishedYear">出版年</label>
        <InputNumber id="publishedYear" @bind-Value="Book.PublishedYear" class="form-control" />
     </div>

    <br />
     <button type="submit" class="btn btn-primary">保存</button>
 </EditForm>

 <p>@message</p>

@code {
    [Parameter]
    public int? Id { get; set; } = null;

    // フォームから送信された情報を保持するプロパティ
    [SupplyParameterFromForm]
    private Book Book { get; set; } = new();

    private string message = string.Empty;

    // コンポーネント初期化時とパラメータ(今回はId)が変更された時に呼び出される
    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            // 書籍情報が取得できた場合はそれぞれのプロパティに値を設定する
            var book = await Context.Books.FindAsync(Id);
            if (book is not null)
            {
                Book.Title = book.Title;
                Book.Author = book.Author;
                Book.Publisher = book.Publisher;
                Book.PublishedYear = book.PublishedYear;
            }
        }
    }

    // フォーム送信時に呼び出される
    private async Task OnSubmit()
    {
        if (Id is not null)
        {
            await Update();
        }
        else
        {
            await Create();
        }
    }

    // 更新処理
    private async Task Update()
    {
        // 書籍情報が取得できた場合はそれぞれのプロパティの値をフォームの内容で更新する
        var book = await Context.Books.FindAsync(Id);
        if (book is not null)
        {
            book.Title = Book.Title;
            book.Author = Book.Author;
            book.Publisher = Book.Publisher;
            book.PublishedYear = Book.PublishedYear;

            var result = await Context.SaveChangesAsync();

            message = (result == 1) ? "更新しました" : "更新に失敗しました";
        }
    }

    //　登録処理
    private async Task Create()
    {
        // フォームの内容をBooksテーブルに登録する
        Context.Books.Add(Book);
        var result = await Context.SaveChangesAsync();

        message = (result == 1) ? "登録しました" : "登録に失敗しました";
    }
}
